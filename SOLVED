@Aluno: Vinicius Mari Marrafon;   USP: 17089004
        Gabriel Pinho Nogueira;   USP: 16306098
	Eduardo Sperle Honorato;  USP: 14739386

@Disciplina: Sistemas Operacionais (Pós-graduação)

O que foi feito?
R: Neste projeto, foi implementado uma função printp (print pixel) no qual recebe como argumento as coordenadas (x,y) da tela junto com a coloração do pixel que será "imprimido" na tela.Essa função faz a utilização da interrupção 0x10. Fizemos também a biblioteca timec.h, no qual contém algumas funções de acesso do "real time clock" do sistema, utilizando a interrupção 

Como foi feito?
R: O arquivo libc.S contém dois labels representando as funções necessárias para o correto funcionamento da função printp. São elas: set_video_mode, printp. A primeira destas "seta" o modo de escrita da BIOS em modo de vídeo, o que, por exemplo, nos permite escrever pixels na tela. A printp é a função que escreve o pixel DEPOIS QUE O MODO DE VÍDEO FOR "SETADO". Ela recebe 3 argumentos, como supracitado. Com o atributo fastcall, os primeiros dois argumentos são enviados via registrados %bx e %cx. Mais argumentos são enviados via stack, mas não apenas isso. O ponteiro de retorno também é enviado via stack! com o tamanho de 2 Bytes (16-bits), por isso a leitura do 3º argumento é feita da 6 posição da pilha.

Sobre a implementação do timec.h e seus códigos assembly, é bem simplex. Fizemos uma função para "setar" o RTC e outra para ler o RTC apenas alterando o valor que é colocado no registrados %ah. Essa interrupção retorna o tempo no formato binário BCD (Binary Coded Decimal), no qual a cada 4 bits representa um dígito decimal. Para mostrar na tela utilizamos a printf.
